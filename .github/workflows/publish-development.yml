name: publish-development

on:
  workflow_call:
    inputs:
      REPO_NAME:
        type: string
        required: true
      SERVICE_SECRET:
        type: string
        required: true

env:
  ENV: 'development'
  
jobs:
  push-to-registry:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - uses: actions/checkout@v4
      - name: Install Doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}
      - name: Set Version ENV
        run: |
          export VERSION=$(grep version package.json | awk -F \" '{print $4}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Login To Doctl Registry
        run: doctl registry login
      - name: Build Docker Image
        run: docker build --target production --tag ${{ secrets.DO_REGISTRY }}/${{ inputs.REPO_NAME }}-${{ env.ENV }}:${{ env.VERSION }} .
      - name: Push To Docker Registry
        run: docker push ${{ secrets.DO_REGISTRY }}/${{ inputs.REPO_NAME }}-${{ env.ENV }}:${{ env.VERSION }}
  deploy:
    cancel-timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [push-to-registry]
    if: ${{ needs.push-to-registry.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}
      - name: Save DigitalOcean Kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 1200 ${{ secrets.KUBE_CLUSTER_ID_STAGING }}
      - name: Create Microservice Namespace
        run:
          kubectl create namespace ${{ env.ENV }} --dry-run=client -o yaml | kubectl apply -f -\

      - name: Create Secret YAML file
        run: |
          cat <<EOF > secret.yaml
          ${{ inputs.SERVICE_SECRET }}
      - name: Apply Secret
        run: kubectl apply -f secret.yaml
        
      - uses: akiojin/decode-base64-github-action@v0.1.0
        id: decode-gcp-credential
        with:
          base64: ${{ secrets.GCP_SQL_CREDENTIAL_STAGING }}
      - name: Create CloudSQL Service Account JSON
        run: |
          cat <<EOF > service-account-key.json
          ${{ steps.decode-gcp-credential.outputs.decoded }}
          EOF
      - name: Create CloudSQL Secret
        run: |
          kubectl create secret generic cloudsql-instance-credentials \
          --from-file=credentials.json=./service-account-key.json \
          -n development \
          --dry-run=client -o yaml | kubectl apply -f -
      - name: Helm Deploy
        uses: vimeda/helm@v1.7.0
        with:
          release: ${{ inputs.REPO_NAME }}
          track: ${{ env.ENV }}
          version: ${{ env.VERSION }}
          namespace: ${{ env.ENV }}
          chart: '.helm-${{ env.ENV }}'
          token: ${{ github.token }}
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBE_CONFIG_STAGING }}'